// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="update_update,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.186000,HLS_SYN_LAT=46,HLS_SYN_TPT=none,HLS_SYN_MEM=100,HLS_SYN_DSP=0,HLS_SYN_FF=789,HLS_SYN_LUT=1198,HLS_VERSION=2020_2}" *)

module update (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src_i,
        dst_i,
        sport_i,
        dport_i,
        post_i,
        post_o,
        post_o_ap_vld,
        p,
        c_i,
        c_o,
        c_o_ap_vld,
        src_o,
        src_o_ap_vld,
        dst_o,
        dst_o_ap_vld,
        sport_o,
        sport_o_ap_vld,
        dport_o,
        dport_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 52'd1;
parameter    ap_ST_fsm_state2 = 52'd2;
parameter    ap_ST_fsm_state3 = 52'd4;
parameter    ap_ST_fsm_state4 = 52'd8;
parameter    ap_ST_fsm_state5 = 52'd16;
parameter    ap_ST_fsm_state6 = 52'd32;
parameter    ap_ST_fsm_state7 = 52'd64;
parameter    ap_ST_fsm_state8 = 52'd128;
parameter    ap_ST_fsm_state9 = 52'd256;
parameter    ap_ST_fsm_state10 = 52'd512;
parameter    ap_ST_fsm_state11 = 52'd1024;
parameter    ap_ST_fsm_state12 = 52'd2048;
parameter    ap_ST_fsm_state13 = 52'd4096;
parameter    ap_ST_fsm_state14 = 52'd8192;
parameter    ap_ST_fsm_state15 = 52'd16384;
parameter    ap_ST_fsm_state16 = 52'd32768;
parameter    ap_ST_fsm_state17 = 52'd65536;
parameter    ap_ST_fsm_state18 = 52'd131072;
parameter    ap_ST_fsm_state19 = 52'd262144;
parameter    ap_ST_fsm_state20 = 52'd524288;
parameter    ap_ST_fsm_state21 = 52'd1048576;
parameter    ap_ST_fsm_state22 = 52'd2097152;
parameter    ap_ST_fsm_state23 = 52'd4194304;
parameter    ap_ST_fsm_state24 = 52'd8388608;
parameter    ap_ST_fsm_state25 = 52'd16777216;
parameter    ap_ST_fsm_state26 = 52'd33554432;
parameter    ap_ST_fsm_state27 = 52'd67108864;
parameter    ap_ST_fsm_state28 = 52'd134217728;
parameter    ap_ST_fsm_state29 = 52'd268435456;
parameter    ap_ST_fsm_state30 = 52'd536870912;
parameter    ap_ST_fsm_state31 = 52'd1073741824;
parameter    ap_ST_fsm_state32 = 52'd2147483648;
parameter    ap_ST_fsm_state33 = 52'd4294967296;
parameter    ap_ST_fsm_state34 = 52'd8589934592;
parameter    ap_ST_fsm_state35 = 52'd17179869184;
parameter    ap_ST_fsm_state36 = 52'd34359738368;
parameter    ap_ST_fsm_state37 = 52'd68719476736;
parameter    ap_ST_fsm_state38 = 52'd137438953472;
parameter    ap_ST_fsm_state39 = 52'd274877906944;
parameter    ap_ST_fsm_state40 = 52'd549755813888;
parameter    ap_ST_fsm_state41 = 52'd1099511627776;
parameter    ap_ST_fsm_state42 = 52'd2199023255552;
parameter    ap_ST_fsm_state43 = 52'd4398046511104;
parameter    ap_ST_fsm_state44 = 52'd8796093022208;
parameter    ap_ST_fsm_state45 = 52'd17592186044416;
parameter    ap_ST_fsm_state46 = 52'd35184372088832;
parameter    ap_ST_fsm_state47 = 52'd70368744177664;
parameter    ap_ST_fsm_state48 = 52'd140737488355328;
parameter    ap_ST_fsm_state49 = 52'd281474976710656;
parameter    ap_ST_fsm_state50 = 52'd562949953421312;
parameter    ap_ST_fsm_state51 = 52'd1125899906842624;
parameter    ap_ST_fsm_state52 = 52'd2251799813685248;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] src_i;
input  [31:0] dst_i;
input  [31:0] sport_i;
input  [31:0] dport_i;
input  [31:0] post_i;
output  [31:0] post_o;
output   post_o_ap_vld;
input  [31:0] p;
input  [31:0] c_i;
output  [31:0] c_o;
output   c_o_ap_vld;
output  [31:0] src_o;
output   src_o_ap_vld;
output  [31:0] dst_o;
output   dst_o_ap_vld;
output  [31:0] sport_o;
output   sport_o_ap_vld;
output  [31:0] dport_o;
output   dport_o_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] post_o;
reg post_o_ap_vld;
reg[31:0] c_o;
reg c_o_ap_vld;
reg src_o_ap_vld;
reg dst_o_ap_vld;
reg sport_o_ap_vld;
reg dport_o_ap_vld;

(* fsm_encoding = "none" *) reg   [51:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [17:0] B_address0;
reg    B_ce0;
reg    B_we0;
wire   [7:0] B_d0;
wire   [7:0] B_q0;
wire   [31:0] grp_fu_217_p2;
reg   [31:0] reg_234;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state45;
wire   [31:0] grp_fu_226_p1;
reg   [31:0] reg_240;
wire    ap_CS_fsm_state43;
reg   [14:0] lshr_ln4_reg_627;
reg   [16:0] tmp_4_reg_632;
wire   [31:0] h1_2_fu_368_p2;
reg   [31:0] h1_2_reg_637;
wire    ap_CS_fsm_state2;
wire  signed [31:0] xor_ln11_fu_419_p2;
reg  signed [31:0] xor_ln11_reg_642;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_fu_450_p2;
reg   [31:0] hashIndex_reg_652;
wire    ap_CS_fsm_state39;
wire   [2:0] trunc_ln13_fu_456_p1;
reg   [2:0] trunc_ln13_reg_657;
reg   [17:0] B_addr_reg_662;
wire    ap_CS_fsm_state40;
wire   [0:0] icmp_ln17_fu_490_p2;
reg   [0:0] icmp_ln17_reg_672;
wire   [31:0] bitcast_ln20_fu_503_p1;
wire    ap_CS_fsm_state41;
wire   [0:0] icmp_ln20_fu_544_p2;
reg   [0:0] icmp_ln20_reg_681;
wire   [0:0] icmp_ln20_1_fu_550_p2;
reg   [0:0] icmp_ln20_1_reg_686;
wire   [0:0] icmp_ln20_2_fu_556_p2;
reg   [0:0] icmp_ln20_2_reg_691;
wire   [0:0] icmp_ln20_3_fu_562_p2;
reg   [0:0] icmp_ln20_3_reg_696;
wire   [31:0] sub_ln26_fu_595_p2;
wire    ap_CS_fsm_state44;
wire   [63:0] zext_ln17_fu_470_p1;
wire   [31:0] add_ln19_fu_568_p2;
wire   [0:0] and_ln20_1_fu_589_p2;
wire   [31:0] bitcast_ln26_fu_602_p1;
wire    ap_CS_fsm_state52;
reg   [31:0] grp_fu_217_p0;
wire    ap_CS_fsm_state46;
reg   [31:0] grp_fu_226_p0;
wire   [31:0] xor_ln14_1_fu_252_p2;
wire   [31:0] xor_ln14_fu_246_p2;
wire  signed [31:0] XOR_fu_258_p2;
wire  signed [30:0] k1_2_fu_264_p1;
wire   [29:0] mul_ln4_fu_270_p1;
wire   [31:0] k1_2_fu_264_p2;
wire   [31:0] mul_ln4_fu_270_p2;
wire  signed [31:0] k1_fu_296_p3;
wire   [29:0] k1_4_fu_302_p1;
wire  signed [29:0] mul_ln4_1_fu_308_p1;
wire   [31:0] k1_4_fu_302_p2;
wire   [31:0] mul_ln4_1_fu_308_p2;
wire   [18:0] tmp_6_fu_324_p4;
wire   [12:0] lshr_ln4_1_fu_314_p4;
wire   [16:0] tmp_7_fu_342_p4;
wire   [31:0] h1_fu_334_p3;
wire   [31:0] add_ln34_fu_362_p2;
wire   [31:0] shl_ln_fu_352_p4;
wire   [31:0] h1_3_fu_374_p2;
wire   [15:0] lshr_ln9_fu_379_p4;
wire   [31:0] zext_ln9_fu_389_p1;
wire  signed [31:0] mul_ln10_fu_399_p0;
wire   [31:0] mul_ln10_fu_399_p2;
wire   [18:0] lshr_ln_fu_405_p4;
wire   [31:0] zext_ln11_fu_415_p1;
wire  signed [30:0] mul_ln12_fu_425_p1;
wire   [31:0] mul_ln12_fu_425_p2;
wire   [15:0] lshr_ln1_fu_430_p4;
wire   [31:0] zext_ln13_fu_440_p1;
wire   [31:0] grp_fu_450_p0;
wire   [18:0] grp_fu_450_p1;
wire   [14:0] lshr_ln2_fu_460_p4;
wire   [7:0] zext_ln17_1_fu_475_p1;
wire   [7:0] lshr_ln18_fu_478_p2;
wire   [7:0] and_ln17_fu_484_p2;
wire   [31:0] bitcast_ln20_1_fu_508_p1;
wire   [31:0] bitcast_ln20_2_fu_526_p1;
wire   [7:0] tmp_fu_512_p4;
wire   [22:0] trunc_ln20_fu_522_p1;
wire   [7:0] tmp_1_fu_530_p4;
wire   [22:0] trunc_ln20_1_fu_540_p1;
wire   [0:0] or_ln20_fu_575_p2;
wire   [0:0] or_ln20_1_fu_579_p2;
wire   [0:0] and_ln20_fu_583_p2;
wire   [0:0] grp_fu_229_p2;
wire   [31:0] grp_fu_222_p2;
reg    grp_fu_450_ap_start;
wire    grp_fu_450_ap_done;
reg   [51:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 52'd1;
end

update_B #(
    .DataWidth( 8 ),
    .AddressRange( 204800 ),
    .AddressWidth( 18 ))
B_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B_address0),
    .ce0(B_ce0),
    .we0(B_we0),
    .d0(B_d0),
    .q0(B_q0)
);

update_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_2_max_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_217_p0),
    .din1(32'd1212678144),
    .ce(1'b1),
    .dout(grp_fu_217_p2)
);

update_fdiv_32ns_32ns_32_7_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_7_no_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_234),
    .din1(reg_240),
    .ce(1'b1),
    .dout(grp_fu_222_p2)
);

update_uitofp_32ns_32_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
uitofp_32ns_32_2_no_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_226_p0),
    .ce(1'b1),
    .dout(grp_fu_226_p1)
);

update_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_226_p1),
    .din1(reg_234),
    .ce(1'b1),
    .opcode(5'd5),
    .dout(grp_fu_229_p2)
);

update_mul_32s_31s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 32 ))
mul_32s_31s_32_1_1_U5(
    .din0(XOR_fu_258_p2),
    .din1(k1_2_fu_264_p1),
    .dout(k1_2_fu_264_p2)
);

update_mul_32s_30ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 30 ),
    .dout_WIDTH( 32 ))
mul_32s_30ns_32_1_1_U6(
    .din0(XOR_fu_258_p2),
    .din1(mul_ln4_fu_270_p1),
    .dout(mul_ln4_fu_270_p2)
);

update_mul_32s_30ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 30 ),
    .dout_WIDTH( 32 ))
mul_32s_30ns_32_1_1_U7(
    .din0(k1_fu_296_p3),
    .din1(k1_4_fu_302_p1),
    .dout(k1_4_fu_302_p2)
);

update_mul_32s_30s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 30 ),
    .dout_WIDTH( 32 ))
mul_32s_30s_32_1_1_U8(
    .din0(k1_fu_296_p3),
    .din1(mul_ln4_1_fu_308_p1),
    .dout(mul_ln4_1_fu_308_p2)
);

update_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U9(
    .din0(mul_ln10_fu_399_p0),
    .din1(32'd2246822507),
    .dout(mul_ln10_fu_399_p2)
);

update_mul_32s_31s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 32 ))
mul_32s_31s_32_1_1_U10(
    .din0(xor_ln11_reg_642),
    .din1(mul_ln12_fu_425_p1),
    .dout(mul_ln12_fu_425_p2)
);

update_urem_32ns_19ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 32 ))
urem_32ns_19ns_32_36_seq_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_450_ap_start),
    .done(grp_fu_450_ap_done),
    .din0(grp_fu_450_p0),
    .din1(grp_fu_450_p1),
    .ce(1'b1),
    .dout(grp_fu_450_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        B_addr_reg_662[14 : 0] <= zext_ln17_fu_470_p1[14 : 0];
        hashIndex_reg_652 <= grp_fu_450_p2;
        trunc_ln13_reg_657 <= trunc_ln13_fu_456_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        h1_2_reg_637 <= h1_2_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        icmp_ln17_reg_672 <= icmp_ln17_fu_490_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        icmp_ln20_1_reg_686 <= icmp_ln20_1_fu_550_p2;
        icmp_ln20_2_reg_691 <= icmp_ln20_2_fu_556_p2;
        icmp_ln20_3_reg_696 <= icmp_ln20_3_fu_562_p2;
        icmp_ln20_reg_681 <= icmp_ln20_fu_544_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        lshr_ln4_reg_627 <= {{k1_2_fu_264_p2[31:17]}};
        tmp_4_reg_632 <= {{mul_ln4_fu_270_p2[31:15]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state42))) begin
        reg_234 <= grp_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state45))) begin
        reg_240 <= grp_fu_226_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        xor_ln11_reg_642 <= xor_ln11_fu_419_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        B_address0 = B_addr_reg_662;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        B_address0 = zext_ln17_fu_470_p1;
    end else begin
        B_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) & (icmp_ln17_fu_490_p2 == 1'd1))) begin
        B_we0 = 1'b1;
    end else begin
        B_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        c_o = add_ln19_fu_568_p2;
    end else begin
        c_o = c_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        c_o_ap_vld = 1'b1;
    end else begin
        c_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln20_1_fu_589_p2) & (1'b1 == ap_CS_fsm_state44))) begin
        dport_o_ap_vld = 1'b1;
    end else begin
        dport_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln20_1_fu_589_p2) & (1'b1 == ap_CS_fsm_state44))) begin
        dst_o_ap_vld = 1'b1;
    end else begin
        dst_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_217_p0 = p;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_217_p0 = bitcast_ln20_fu_503_p1;
    end else begin
        grp_fu_217_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_226_p0 = sub_ln26_fu_595_p2;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_226_p0 = hashIndex_reg_652;
    end else begin
        grp_fu_226_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_450_ap_start = 1'b1;
    end else begin
        grp_fu_450_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) & (icmp_ln17_reg_672 == 1'd1))) begin
        post_o = bitcast_ln26_fu_602_p1;
    end else begin
        post_o = post_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) & (icmp_ln17_reg_672 == 1'd1))) begin
        post_o_ap_vld = 1'b1;
    end else begin
        post_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln20_1_fu_589_p2) & (1'b1 == ap_CS_fsm_state44))) begin
        sport_o_ap_vld = 1'b1;
    end else begin
        sport_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln20_1_fu_589_p2) & (1'b1 == ap_CS_fsm_state44))) begin
        src_o_ap_vld = 1'b1;
    end else begin
        src_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            if (((1'b1 == ap_CS_fsm_state40) & (icmp_ln17_fu_490_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_d0 = (lshr_ln18_fu_478_p2 | B_q0);

assign XOR_fu_258_p2 = (xor_ln14_fu_246_p2 ^ xor_ln14_1_fu_252_p2);

assign add_ln19_fu_568_p2 = (c_i + 32'd1);

assign add_ln34_fu_362_p2 = ($signed(h1_fu_334_p3) + $signed(32'd3864292196));

assign and_ln17_fu_484_p2 = (lshr_ln18_fu_478_p2 & B_q0);

assign and_ln20_1_fu_589_p2 = (grp_fu_229_p2 & and_ln20_fu_583_p2);

assign and_ln20_fu_583_p2 = (or_ln20_fu_575_p2 & or_ln20_1_fu_579_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign bitcast_ln20_1_fu_508_p1 = grp_fu_226_p1;

assign bitcast_ln20_2_fu_526_p1 = reg_234;

assign bitcast_ln20_fu_503_p1 = post_i;

assign bitcast_ln26_fu_602_p1 = grp_fu_222_p2;

assign dport_o = dport_i;

assign dst_o = dst_i;

assign grp_fu_450_p0 = (zext_ln13_fu_440_p1 ^ mul_ln12_fu_425_p2);

assign grp_fu_450_p1 = 32'd204800;

assign h1_2_fu_368_p2 = (add_ln34_fu_362_p2 + shl_ln_fu_352_p4);

assign h1_3_fu_374_p2 = (h1_2_reg_637 ^ 32'd4);

assign h1_fu_334_p3 = {{tmp_6_fu_324_p4}, {lshr_ln4_1_fu_314_p4}};

assign icmp_ln17_fu_490_p2 = ((and_ln17_fu_484_p2 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln20_1_fu_550_p2 = ((trunc_ln20_fu_522_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln20_2_fu_556_p2 = ((tmp_1_fu_530_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln20_3_fu_562_p2 = ((trunc_ln20_1_fu_540_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_544_p2 = ((tmp_fu_512_p4 != 8'd255) ? 1'b1 : 1'b0);

assign k1_2_fu_264_p1 = 32'd3432918353;

assign k1_4_fu_302_p1 = 32'd461845907;

assign k1_fu_296_p3 = {{tmp_4_reg_632}, {lshr_ln4_reg_627}};

assign lshr_ln18_fu_478_p2 = 8'd128 >> zext_ln17_1_fu_475_p1;

assign lshr_ln1_fu_430_p4 = {{mul_ln12_fu_425_p2[31:16]}};

assign lshr_ln2_fu_460_p4 = {{grp_fu_450_p2[17:3]}};

assign lshr_ln4_1_fu_314_p4 = {{k1_4_fu_302_p2[31:19]}};

assign lshr_ln9_fu_379_p4 = {{h1_3_fu_374_p2[31:16]}};

assign lshr_ln_fu_405_p4 = {{mul_ln10_fu_399_p2[31:13]}};

assign mul_ln10_fu_399_p0 = (zext_ln9_fu_389_p1 ^ h1_3_fu_374_p2);

assign mul_ln12_fu_425_p1 = 32'd3266489909;

assign mul_ln4_1_fu_308_p1 = 32'd3870449664;

assign mul_ln4_fu_270_p1 = 32'd380141568;

assign or_ln20_1_fu_579_p2 = (icmp_ln20_3_reg_696 | icmp_ln20_2_reg_691);

assign or_ln20_fu_575_p2 = (icmp_ln20_reg_681 | icmp_ln20_1_reg_686);

assign shl_ln_fu_352_p4 = {{{tmp_7_fu_342_p4}, {lshr_ln4_1_fu_314_p4}}, {2'd0}};

assign sport_o = sport_i;

assign src_o = src_i;

assign sub_ln26_fu_595_p2 = (32'd204799 - c_i);

assign tmp_1_fu_530_p4 = {{bitcast_ln20_2_fu_526_p1[30:23]}};

assign tmp_6_fu_324_p4 = {{mul_ln4_1_fu_308_p2[31:13]}};

assign tmp_7_fu_342_p4 = {{mul_ln4_1_fu_308_p2[29:13]}};

assign tmp_fu_512_p4 = {{bitcast_ln20_1_fu_508_p1[30:23]}};

assign trunc_ln13_fu_456_p1 = grp_fu_450_p2[2:0];

assign trunc_ln20_1_fu_540_p1 = bitcast_ln20_2_fu_526_p1[22:0];

assign trunc_ln20_fu_522_p1 = bitcast_ln20_1_fu_508_p1[22:0];

assign xor_ln11_fu_419_p2 = (zext_ln11_fu_415_p1 ^ mul_ln10_fu_399_p2);

assign xor_ln14_1_fu_252_p2 = (dst_i ^ dport_i);

assign xor_ln14_fu_246_p2 = (src_i ^ sport_i);

assign zext_ln11_fu_415_p1 = lshr_ln_fu_405_p4;

assign zext_ln13_fu_440_p1 = lshr_ln1_fu_430_p4;

assign zext_ln17_1_fu_475_p1 = trunc_ln13_reg_657;

assign zext_ln17_fu_470_p1 = lshr_ln2_fu_460_p4;

assign zext_ln9_fu_389_p1 = lshr_ln9_fu_379_p4;

always @ (posedge ap_clk) begin
    B_addr_reg_662[17:15] <= 3'b000;
end

endmodule //update
